/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/awYW9LOcwzj
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Caudex } from 'next/font/google'
import { Rethink_Sans } from 'next/font/google'

caudex({
  subsets: ['latin'],
  display: 'swap',
})

rethink_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Input } from "@/components/ui/input"
import { AssignmentModal } from "@/components/component/assignment-modal"
import { AssignmentTeacherModal } from "@/components/component/assignment-teacher-modal"

export default function  techersPortal() {
  const [activeTab, setActiveTab] = useState("progress")
  const [activeAssignmentTab, setActiveAssignmentTab] = useState("current")
  const [viewingAssignment, setViewingAssignment] = useState(null)
  const [studentMarks, setStudentMarks] = useState({})
  return (
    (<div className="flex flex-col w-full min-h-screen bg-background">
      <header
        className="sticky top-0 z-10 flex items-center h-16 px-4 border-b bg-[#FBFBFB] shadow sm:px-6">
        <nav className="flex gap-6 text-lg font-medium md:gap-8">
        <Button
        variant='ghost'
            >
           <img src="https://student.saylaniwelfare.com/assets/logo-OpazD70S.png" className="w-20" alt="" />
          </Button>
          <Button
            variant="ghost"
            className={`px-4 py-2 rounded-md ${activeTab === "progress" ? "bg-muted" : ""}`}
            onClick={() => setActiveTab("progress")}>
            Progress
          </Button>
          <Button
            variant="ghost"
            className={`px-4 py-2 rounded-md ${activeTab === "quiz" ? "bg-muted" : ""}`}
            onClick={() => setActiveTab("quiz")}>
            Quiz
          </Button>
          <Button
            variant="ghost"
            className={`px-4 py-2 rounded-md ${activeTab === "assignments" ? "bg-muted" : ""}`}
            onClick={() => setActiveTab("assignments")}>
            Assignments
          </Button>
        </nav>
      </header>
      <main className="flex-1 p-4 sm:p-6">
        {activeTab === "progress" && (
          <div>
            <h2 className="text-2xl font-bold mb-4">Progress</h2>
            <p>This is the progress tab content.</p>
            {/* <div className="bg-muted rounded-lg p-4">
                    <h3 className="text-lg font-bold mb-4">Leaderboard</h3>
                    <div className="space-y-2">
                      <div className="flex items-center justify-between">
                        <div>1. John Doe</div>
                        <div className="font-bold">95%</div>
                      </div>
                      <div className="flex items-center justify-between">
                        <div>2. Jane Smith</div>
                        <div className="font-bold">92%</div>
                      </div>
                      <div className="flex items-center justify-between">
                        <div>3. Michael Johnson</div>
                        <div className="font-bold">88%</div>
                      </div>
                      <div className="flex items-center justify-between">
                        <div>4. Emily Davis</div>
                        <div className="font-bold">85%</div>
                      </div>
                      <div className="flex items-center justify-between">
                        <div>5. David Lee</div>
                        <div className="font-bold">82%</div>
                      </div>
                      <div className="flex items-center justify-between">
                        <div>5. David Lee</div>
                        <div className="font-bold">82%</div>
                      </div>
                      <div className="flex items-center justify-between">
                        <div>5. David Lee</div>
                        <div className="font-bold">82%</div>
                      </div>
                      <div className="flex items-center justify-between">
                        <div>5. David Lee</div>
                        <div className="font-bold">82%</div>
                      </div>
                    </div>
                  </div>*/}
          </div> 
        )}
        {activeTab === "quiz" && (
          <div>
            <h2 className="text-2xl font-bold mb-4">Quiz</h2>
            <p>This is the quiz tab content.</p>
          </div>
        )}
        {activeTab === "assignments" && (
          <div>
            {viewingAssignment ? (
              <div>
                <div className="flex items-center gap-4 mb-4">
                  <Button
                    variant="ghost"
                    size="icon"
                    className="p-4 rounded-full  bg-muted-foreground"
                    onClick={() => setViewingAssignment(null)}>
                    <ArrowLeftIcon className="w-8 h-8" />
                    <span className="sr-only">Back</span>
                  </Button>
                  <h2 className="text-2xl font-bold">{viewingAssignment.name}</h2>
                </div>
                <div className="space-y-4">
                  <div className="prose">
                    <h3>Assignment Description</h3>
                    <p>{viewingAssignment.description}</p>
                  </div>
                  <div className="space-y-4">
                    <h3 className="text-xl font-bold">Student Submissions</h3>
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Name</TableHead>
                          <TableHead>Roll No.</TableHead>
                          <TableHead>Attachment</TableHead>
                          <TableHead>Marks</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        <TableRow>
                          <TableCell>John Doe</TableCell>
                          <TableCell>123</TableCell>
                          <TableCell>
                            <Button variant="ghost" size="icon">
                              <PaperclipIcon className="w-4 h-4" />
                              <span className="sr-only">View Attachment</span>
                            </Button>
                          </TableCell>
                          <TableCell>
                            <Input
                              type="number"
                              min="0"
                              max="100"
                              value={studentMarks["john-doe"] || ""}
                              onChange={(e) => setStudentMarks({ ...studentMarks, "john-doe": e.target.value })}
                              className="w-20" />
                          </TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell>Jane Smith</TableCell>
                          <TableCell>456</TableCell>
                          <TableCell>
                            <Button variant="ghost" size="icon">
                              <PaperclipIcon className="w-4 h-4" />
                              <span className="sr-only">View Attachment</span>
                            </Button>
                          </TableCell>
                          <TableCell>
                            <Input
                              type="number"
                              min="0"
                              max="100"
                              value={studentMarks["jane-smith"] || ""}
                              onChange={(e) => setStudentMarks({ ...studentMarks, "jane-smith": e.target.value })}
                              className="w-20" />
                          </TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell>Bob Johnson</TableCell>
                          <TableCell>789</TableCell>
                          <TableCell>
                            <Button variant="ghost" size="icon">
                              <PaperclipIcon className="w-4 h-4" />
                              <span className="sr-only">View Attachment</span>
                            </Button>
                          </TableCell>
                          <TableCell>
                            <Input
                              type="number"
                              min="0"
                              max="100"
                              value={studentMarks["bob-johnson"] || ""}
                              onChange={(e) => setStudentMarks({ ...studentMarks, "bob-johnson": e.target.value })}
                              className="w-20" />
                          </TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </div>
                </div>
              </div>
            ) : (
              <div>
                <div className="flex gap-4 mb-4">
                  <Button
                    variant="ghost"
                    className={`px-4 py-2 rounded-md ${activeAssignmentTab === "current" ? "bg-muted" : ""}`}
                    onClick={() => setActiveAssignmentTab("current")}>
                    Current
                  </Button>
                  <Button
                    variant="ghost"
                    className={`px-4 py-2 rounded-md ${activeAssignmentTab === "previous" ? "bg-muted" : ""}`}
                    onClick={() => setActiveAssignmentTab("previous")}>
                    Previous
                  </Button>
                  {/* <Button className="ml-auto flex items-center gap-2 px-6 py-3 text-lg font-medium">
                    <PlusIcon className="h-5 w-5" />
                    Create
                  </Button> */}
                  <AssignmentTeacherModal/>
                </div>
                {activeAssignmentTab === "current" && (
                  <div>
                    <h2 className="text-2xl font-bold mb-4">Current Assignments</h2>
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Name</TableHead>
                          <TableHead>Due Date</TableHead>
                          <TableHead>Actions</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        <TableRow>
                          <TableCell>Assignment 1</TableCell>
                          <TableCell>2023-06-30</TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() =>
                                  setViewingAssignment({
                                    name: "Assignment 1",
                                    description: "This is the description for Assignment 1.",
                                  })
                                }>
                                <EyeIcon className="w-4 h-4" />
                                <span className="sr-only">View</span>
                              </Button>
                              <Button variant="ghost" size="icon">
                            <FilePenIcon className="w-4 h-4" />
                            <span className="sr-only">Edit</span>
                          </Button>
                          <Button variant="ghost" size="icon">
                            <TrashIcon className="w-4 h-4" />
                            <span className="sr-only">Delete</span>
                          </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell>Assignment 2</TableCell>
                          <TableCell>2023-07-15</TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() =>
                                  setViewingAssignment({
                                    name: "Assignment 2",
                                    description: "This is the description for Assignment 2.",
                                  })
                                }>
                                <EyeIcon className="w-4 h-4" />
                                <span className="sr-only">View</span>
                              </Button>
                              <Button variant="ghost" size="icon">
                            <FilePenIcon className="w-4 h-4" />
                            <span className="sr-only">Edit</span>
                          </Button>
                          <Button variant="ghost" size="icon">
                            <TrashIcon className="w-4 h-4" />
                            <span className="sr-only">Delete</span>
                          </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell>Assignment 3</TableCell>
                          <TableCell>2023-08-01</TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() =>
                                  setViewingAssignment({
                                    name: "Assignment 3",
                                    description: "This is the description for Assignment 3.",
                                  })
                                }>
                                <EyeIcon className="w-4 h-4" />
                                <span className="sr-only">View</span>
                              </Button>
                              <Button variant="ghost" size="icon">
                            <FilePenIcon className="w-4 h-4" />
                            <span className="sr-only">Edit</span>
                          </Button>
                          <Button variant="ghost" size="icon">
                            <TrashIcon className="w-4 h-4" />
                            <span className="sr-only">Delete</span>
                          </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </div>
                )}
                {activeAssignmentTab === "previous" && (
                  <div>
                    <h2 className="text-2xl font-bold mb-4">Previous Assignments</h2>
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Name</TableHead>
                          <TableHead>Due Date</TableHead>
                          <TableHead>View</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        <TableRow>
                          <TableCell>Assignment 4</TableCell>
                          <TableCell>2023-05-31</TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() =>
                                  setViewingAssignment({
                                    name: "Assignment 4",
                                    description: "This is the description for Assignment 4.",
                                  })
                                }>
                                <EyeIcon className="w-4 h-4" />
                                <span className="sr-only">View</span>
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell>Assignment 5</TableCell>
                          <TableCell>2023-04-15</TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() =>
                                  setViewingAssignment({
                                    name: "Assignment 5",
                                    description: "This is the description for Assignment 5.",
                                  })
                                }>
                                <EyeIcon className="w-4 h-4" />
                                <span className="sr-only">View</span>
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell>Assignment 6</TableCell>
                          <TableCell>2023-03-01</TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() =>
                                  setViewingAssignment({
                                    name: "Assignment 6",
                                    description: "This is the description for Assignment 6.",
                                  })
                                }>
                                <EyeIcon className="w-4 h-4" />
                                <span className="sr-only">View</span>
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </div>
                )}
              </div>
            )}
          </div>
        )}
      </main>
    </div>)
  );
}

function ArrowLeftIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="40"
      height="40"
      viewBox="0 0 24 24"
      fill="white"
      stroke="white"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="m12 19-7-7 7-7" />
      <path d="M19 12H5" />
    </svg>)
  );
}


function EyeIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z" />
      <circle cx="12" cy="12" r="3" />
    </svg>)
  );
}


function PaperclipIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path
        d="m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.57a2 2 0 0 1-2.83-2.83l8.49-8.48" />
    </svg>)
  );
}




function FilePenIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v10" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
      <path d="M10.4 12.6a2 2 0 1 1 3 3L8 21l-4 1 1-4Z" />
    </svg>)
  );
}


function PlusIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>)
  );
}


function TrashIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>)
  );
}
