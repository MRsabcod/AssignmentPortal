/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/klyAbYMDEHC
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { useState } from "react"

export function AssignmentModal({variant,text,isDisabled}) {
  const [fileContent, setFileContent] = useState(null)
  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      console.log(reader)
      reader.onload = (e) => {
        const content = e.target.result;
        
        setFileContent(content);
        localStorage.setItem('fileContent', content);
        if(file.type.startsWith('text/'))
        console.log(reader.readAsText(file));
    else if (file?.type.startsWith('image/')) {console.log(reader.readAsDataURL(file))} 
      };
      
      

    }
  };
  return (
    (<Dialog>
      <DialogTrigger asChild>
        <Button variant={variant}>{text}</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[500px]">
        <div className="flex items-center justify-between mb-4">
          <div className="text-sm text-muted-foreground">Time remaining: 2:30</div>
        </div>
        <DialogHeader>
          <DialogTitle>Upload a File</DialogTitle>
          <DialogDescription>Select a file from your computer to upload.</DialogDescription>
          <Card className="mt-4">
            <CardContent className="flex py-3 items-center justify-between">
              <div className="flex items-center gap-4">
                <img
                  src="/placeholder.svg"
                  alt="File thumbnail"
                  width={48}
                  height={48}
                  className="rounded" />
                <div>
                  <div className="font-medium">example.pdf</div>
                  <div className="text-sm text-muted-foreground">12.3 MB</div>
                </div>
              </div>
              <div className="flex items-center gap-4">
                <Button variant="ghost" size="icon">
                  <DownloadIcon className="h-5 w-5" />
                  <span className="sr-only">Download file</span>
                </Button>
                <Button variant="ghost" size="icon">
                  <EyeIcon className="h-5 w-5" />
                  <span className="sr-only">View file</span>
                </Button>
              </div>
            </CardContent>
          </Card>
        </DialogHeader>
        <div className="space-y-4 py-4">
          <div className="space-y-2">
            <Label htmlFor="project-link">Project Link</Label>
            <Input id="project-link" type="text" placeholder="Enter project link" />
          </div>
          <div className="space-y-2">
            <Label htmlFor="file">File</Label>
            <Input id="file" type="file" onChange={handleFileChange} />
          </div>
        </div>
        <DialogFooter>
          <Button type="submit" disabled={isDisabled}>{isDisabled==''?'Unupload' :'Upload'}</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>)
  );
}

function DownloadIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
      <polyline points="7 10 12 15 17 10" />
      <line x1="12" x2="12" y1="15" y2="3" />
    </svg>)
  );
}


function EyeIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z" />
      <circle cx="12" cy="12" r="3" />
    </svg>)
  );
}
